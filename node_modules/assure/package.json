{
  "name": "assure",
  "description": "Promises/A+ micro library",
  "version": "1.0.4",
  "homepage": "http://avoidwork.github.io/assure/",
  "author": {
    "name": "Jason Mulligan",
    "email": "jason.mulligan@avoidwork.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/avoidwork/assure.git"
  },
  "bugs": {
    "url": "https://github.com/avoidwork/assure/issues"
  },
  "licenses": [
    {
      "type": "BSD-3",
      "url": "https://raw.github.com/avoidwork/assure/master/LICENSE"
    }
  ],
  "main": "lib/assure",
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.6",
    "grunt-exec": "~0.4",
    "grunt-contrib-concat": "~0.1.3",
    "grunt-contrib-jshint": "~0.1",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-watch": "~0.2",
    "promises-aplus-tests": "~2.0.3"
  },
  "keywords": [
    "promises",
    "promise",
    "deferred",
    "deferreds",
    "async",
    "aynchronous"
  ],
  "readme": "# assure\n\nPromises/A+ micro library to help with asynchronous work flow. The deferred methods match jQuery's when possible for convenience and familiarity, but under the hood it is a Promises/A+ spec!\n\n[![build status](https://secure.travis-ci.org/avoidwork/assure.png)](http://travis-ci.org/avoidwork/assure)\n\n**Example**\n\n```\nvar deferred = assure();\n\ndeferred.done(function (arg) {\n\tconsole.log(\"Outcome: \" + arg);\n});\n\ndeferred.always(function (arg) {\n\t...\n});\n```\n\n## What is Supported?\n\n* AMD loaders (require.js, cujo.js, etc.)\n* node.js (npm install assure)\n* script tag\n\n## How do I use this?\n\nPromises (deferreds/futures/etc.) are a way to create a tangible connection between `now` and an eventual outcome. Promises are a good pattern for asynchronous I/O, such as API interaction, AJAX operations, etc., by providing optional `success` & `failure` handling.\n\nA `then()` will return a ***new*** Promise which is in a hierarchal relationship. When a \"parent\" is reconciled, it's \"children\" inherit the outcome.\n\n## API\n\n### always\n#### Method\n\nRegisters a function to execute after Promise is reconciled\n\n\tparam  {Function} arg Function to execute\n\treturn {Object}       Deferred\n\n**Example**\n\n```\nvar deferred = assure();\n\ndeferred.always(function() {\n\tconsole.log(\"This is always going to run\");\n});\n```\n\n### done\n#### Method\n\nRegisters a function to execute after Promise is resolved\n\n\tparam  {Function} arg Function to execute\n\treturn {Object}       Deferred\n\n**Example**\n\n```\nvar deferred = assure();\n\ndeferred.done(function() {\n\tconsole.log(\"This is going to run if Promise is resolved\");\n});\n```\n\n### fail\n#### Method\n\nRegisters a function to execute after Promise is rejected\n\n\tparam  {Function} arg Function to execute\n\treturn {Object}       Deferred\n\n**Example**\n\n```\nvar deferred = assure();\n\ndeferred.fail(function() {\n\tconsole.log(\"This is going to run if Promise is rejected\");\n});\n```\n\n### isRejected\n#### Method\n\nDetermines if Deferred is rejected\n\n\treturn {Boolean} `true` if rejected\n\n**Example**\n\n```\nvar deferred = assure();\n\ndeferred.isRejected(); // false, it's brand new!\n```\n\n### isResolved\n#### Method\n\nDetermines if Deferred is resolved\n\n\treturn {Boolean} `true` if resolved\n\n**Example**\n\n```\nvar deferred = assure();\n\ndeferred.isResolved(); // false, it's brand new!\n```\n\n### reject\n#### Method\nBreaks a Promise\n\n\tparam  {Mixed} arg Promise outcome\n\treturn {Object}    Promise\n\n***Example***\n\n```\nvar deferred = assure();\n\ndeferred.then(null, function (e) {\n\tconsole.error(e);\n});\n\ndeferred.reject(\"rejected\");\n```\n\n### resolve\n#### Method\nPromise is resolved\n\n\tparam  {Mixed} arg Promise outcome\n\treturn {Object}    Promise\n\n***Example***\n\n```\nvar deferred = assure();\n\ndeferred.then(function (arg) {\n\tconsole.log(arg);\n});\n\ndeferred.resolve(\"resolved\");\n```\n\n### state\n#### Method\n\nGets the state of the Promise\n\n\treturn {String} Describes the state\n\n**Example**\n\n```\nvar deferred = assure();\n\ndeferred.state(); // `pending`\n```\n\n### then\n#### Method\nRegisters handler(s) for a Promise\n\n\tparam  {Function} success Executed when/if promise is resolved\n\tparam  {Function} failure [Optional] Executed when/if promise is broken\n\treturn {Object}           New Promise instance\n\n***Example***\n\n```\nvar deferred = assure();\n\ndeferred.then(function (arg) {\n\tconsole.log(\"Promise succeeded!\");\n}, function (e) {\n\tconsole.error(\"Promise failed!\");\n});\n\ndeferred.resolve(\"resolved\");\n```\n\n### when\n#### Method\nAccepts Deferreds or Promises as arguments or an Array\n\n\treturn {Object} Deferred\n\n***Example***\n\n```\nvar d1 = assure(),\n    d2 = assure(),\n    d3 = assure();\n\n...\n\nwhen(d1,d2,d3).then(function (values) {\n\t...\n});\n```\n\n## License\nCopyright (c) 2013 Jason Mulligan  \nLicensed under the BSD-3 license.",
  "readmeFilename": "README.md",
  "_id": "assure@1.0.4",
  "dist": {
    "shasum": "cfca4990179b6d52fc195a34d77f2b3b0b8de436"
  },
  "_from": "assure@",
  "_resolved": "https://registry.npmjs.org/assure/-/assure-1.0.4.tgz"
}
